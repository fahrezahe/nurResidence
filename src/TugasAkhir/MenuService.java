/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TugasAkhir;

/**
 *
 * @author fahre
 */
import Database.dbconnection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Connection;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.InputStream;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;




public class MenuService extends javax.swing.JFrame {
    /**
     * Creates new form MenuPIC
     */
    Connection conn;
    PreparedStatement ps;
    ResultSet rs;
    private String imagePath;
    
    public MenuService() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        DefaultTableModel model = new DefaultTableModel();
        tblmaintenance.setModel(model);
        tampilkanDataTabel(); // Panggil metode tampilkanDataTabel() di sini
        tblmaintenance.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblmaintenanceMouseClicked(evt);
        }
    });
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnsearchActionPerformed(evt);
    }
});
        isiComboBoxNoKamar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnhapus = new javax.swing.JButton();
        btntambah = new javax.swing.JButton();
        btnubah = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtnoservice = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cbstatus = new javax.swing.JComboBox<>();
        txttgllapor = new com.toedter.calendar.JDateChooser();
        cbkerusakan = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbnokamar = new javax.swing.JComboBox<>();
        cbprioritas = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtcatatan = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblmaintenance = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        txtsearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnsearch = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnlogout = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu Service");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Assets/logo.png")).getImage());
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(64, 61, 61));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("RESIDENCE");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(157, 159, 157));
        jLabel10.setText("NUR");

        btnhapus.setBackground(new java.awt.Color(242, 242, 242));
        btnhapus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnhapus.setText("HAPUS");
        btnhapus.setBorder(null);
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });

        btntambah.setBackground(new java.awt.Color(242, 242, 242));
        btntambah.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btntambah.setText("TAMBAH");
        btntambah.setBorder(null);
        btntambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahActionPerformed(evt);
            }
        });

        btnubah.setBackground(new java.awt.Color(242, 242, 242));
        btnubah.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnubah.setText("UBAH");
        btnubah.setBorder(null);
        btnubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnubahActionPerformed(evt);
            }
        });

        jLabel11.setForeground(new java.awt.Color(242, 242, 242));
        jLabel11.setText("ID Kerusakan");

        txtnoservice.setBorder(null);

        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("Status Pengerjaan");

        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("Tanggal Pelaporan");

        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setText("Nomor Kamar");

        jLabel12.setForeground(new java.awt.Color(242, 242, 242));
        jLabel12.setText("Catatan");

        cbstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dalam Proses", "Selesai" }));
        cbstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbstatusActionPerformed(evt);
            }
        });

        cbkerusakan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kerusakan Listrik", "Kerusakan Plumbing", "Kerusakan Struktural", "Kerusakan Sanitasi", "Perabotan Rusak", "Networking" }));

        jLabel7.setForeground(new java.awt.Color(242, 242, 242));
        jLabel7.setText("Jenis Kerusakan");

        jLabel8.setForeground(new java.awt.Color(242, 242, 242));
        jLabel8.setText("Skala Prioritas");

        cbprioritas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tinggi", "Sedang", "Rendah", "Pemeliharaan Rutin" }));

        jScrollPane2.setViewportView(txtcatatan);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btntambah, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnubah, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbstatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttgllapor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cbkerusakan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addComponent(txtnoservice)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbnokamar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbprioritas, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtnoservice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(4, 4, 4)
                .addComponent(cbnokamar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbkerusakan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(4, 4, 4)
                .addComponent(cbprioritas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txttgllapor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btntambah, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnubah, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(253, 253, 253));

        tblmaintenance.setBackground(new java.awt.Color(253, 253, 253));
        tblmaintenance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblmaintenance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmaintenanceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblmaintenance);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1161, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        txtsearch.setBorder(null);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(64, 61, 61));
        jLabel2.setText("Search :");

        btnsearch.setBackground(new java.awt.Color(242, 242, 242));
        btnsearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnsearch.setText("search");
        btnsearch.setBorder(null);
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        btnprint.setBackground(new java.awt.Color(242, 242, 242));
        btnprint.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnprint.setText("CETAK DATA");
        btnprint.setBorder(null);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnprint, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnprint, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jMenuBar1.setMinimumSize(new java.awt.Dimension(81, 35));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(81, 35));

        jMenu1.setText("Exit");

        mnlogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/logout.png"))); // NOI18N
        mnlogout.setText("Logout");
        mnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnlogoutActionPerformed(evt);
            }
        });
        jMenu1.add(mnlogout);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Manage");

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/home.png"))); // NOI18N
        jMenuItem2.setText("Home");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/person.png"))); // NOI18N
        jMenu5.setText("Manage Person");

        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/pic.png"))); // NOI18N
        jMenuItem6.setText("PIC");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenu2.add(jMenu5);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/manageroom.png"))); // NOI18N
        jMenu6.setText("Manage Room");

        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/room.png"))); // NOI18N
        jMenuItem8.setText("Kamar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem8);

        jMenu2.add(jMenu6);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/managekeuangan.png"))); // NOI18N
        jMenu7.setText("Manage Keuangan");

        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/biaya.png"))); // NOI18N
        jMenuItem9.setText("Pengeluaran");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem9);

        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/report.png"))); // NOI18N
        jMenuItem10.setText("Laporan Bulanan");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenu2.add(jMenu7);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Information");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/biaya.png"))); // NOI18N
        jMenuItem3.setText("Cetak Informasi Tarif Kontrakan");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/peraturan.png"))); // NOI18N
        jMenuItem4.setText("Cetak Peraturan Kontrakan");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/maintenance_report.png"))); // NOI18N
        jMenuItem5.setText("Cetak Informasi Maintenance");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private boolean isNoServiceExist(String noService) throws SQLException { //cek nama sudah ada
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        // Mendapatkan koneksi dari kelas dbconnection
        conn = dbconnection.koneksi();
        // Query SQL untuk memeriksa apakah nama sudah ada dalam tabel pic
        String query = "SELECT COUNT(*) FROM maintenance WHERE id_kerusakan = ?";
        ps = conn.prepareStatement(query);
        ps.setString(1, noService);
        rs = ps.executeQuery();
        if (rs.next()) {
            int count = rs.getInt(1);
            // Jika count lebih dari 0, berarti nama sudah ada
            return count > 0;
        }
    } finally {
        // Menutup koneksi, PreparedStatement, dan ResultSet
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (conn != null) {
            conn.close();
        }
    }
    return false;
}

private boolean isNokamarExist(String noKamar) throws SQLException { //cek id sudah ada
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        // Mendapatkan koneksi dari kelas dbconnection
        conn = dbconnection.koneksi();
        // Query SQL untuk memeriksa apakah nama sudah ada dalam tabel pic
        String query = "SELECT COUNT(*) FROM pic WHERE id_pic = ?";
        ps = conn.prepareStatement(query);
        ps.setString(1, noKamar);
        rs = ps.executeQuery();
        if (rs.next()) {
            int count = rs.getInt(1);
            // Jika count lebih dari 0, berarti nama sudah ada
            return count > 0;
        }
    } finally {
        // Menutup koneksi, PreparedStatement, dan ResultSet
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (conn != null) {
            conn.close();
        }
    }
    return false;
}
    private void isiComboBoxNoKamar() {
    try {
        // Mendapatkan koneksi dari kelas dbconnection
        Connection conn = dbconnection.koneksi();

        // Query SQL untuk mengambil semua nomor kamar dari tabel kamar
        String query = "SELECT no_kamar FROM kamar";
        PreparedStatement ps = conn.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        // Membersihkan item-item sebelumnya dari JComboBox
        cbnokamar.removeAllItems();

        // Menambahkan nomor kamar ke dalam JComboBox
        while (rs.next()) {
            cbnokamar.addItem(rs.getString("no_kamar"));
        }

        // Menambahkan item default jika diperlukan
        // cbnokamar.addItem("Pilih Nomor Kamar"); // Uncomment baris ini jika ingin menambahkan item default

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
    }
}
    private void mnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnlogoutActionPerformed
        // TODO add your handling code here:
        LoginForm pindah = new LoginForm();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_mnlogoutActionPerformed
    
    private void tampilkanDataTabel() {
         try {
        Connection conn = dbconnection.koneksi();
        String sql = "SELECT * FROM maintenance";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        // Menggunakan DefaultTableModel untuk menampung data dari ResultSet
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID Kerusakan");
        model.addColumn("Nomor Kamar");
        model.addColumn("Jenis Kerusakan");
        model.addColumn("Prioritas");
        model.addColumn("Tanggal Laporan");
        model.addColumn("Status");
        model.addColumn("Komentar");

        while (rs.next()) {
            // Ambil data dari ResultSet
            String idKerusakan = rs.getString("id_kerusakan");
            String noKamar = rs.getString("nokamar");
            String jenisKerusakan = rs.getString("jeniskerusakan");
            String prioritas = rs.getString("prioritas");

            // Mengambil data tanggal dari ResultSet
            java.util.Date tglLaporanDate = rs.getDate("tgllaporan");

            String status = rs.getString("status");
            String komentar = rs.getString("komentar");

            // Tambahkan data ke dalam model
            model.addRow(new Object[]{idKerusakan, noKamar, jenisKerusakan, prioritas, tglLaporanDate, status, komentar});
        }

        // Set model ke dalam tabel
        tblmaintenance.setModel(model);

        // Aktifkan pengurutan pada tabel
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
        tblmaintenance.setRowSorter(sorter);

        // Atur pengurutan awal (misalnya, berdasarkan kolom "ID Kerusakan" secara default)
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Error saat menampilkan data: " + e.getMessage());
    } finally {
        // Tidak perlu menutup koneksi di sini karena koneksi didapatkan dari kelas dbconnection
    }
    }
    private void tampilkanData() {
         try {
        Connection conn = dbconnection.koneksi();
        String sql = "SELECT * FROM maintenance";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        // Menggunakan DefaultTableModel untuk menampung data dari ResultSet
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID Kerusakan");
        model.addColumn("Nomor Kamar");
        model.addColumn("Jenis Kerusakan");
        model.addColumn("Prioritas");
        model.addColumn("Tanggal Laporan");
        model.addColumn("Status");
        model.addColumn("Komentar");

        while (rs.next()) {
            // Ambil data dari ResultSet
            String idKerusakan = rs.getString("id_kerusakan");
            String noKamar = rs.getString("nokamar");
            String jenisKerusakan = rs.getString("jeniskerusakan");
            String prioritas = rs.getString("prioritas");

            // Mengambil data tanggal dari ResultSet
            java.util.Date tglLaporanDate = rs.getDate("tgllaporan");

            String status = rs.getString("status");
            String komentar = rs.getString("komentar");

            // Tambahkan data ke dalam model
            model.addRow(new Object[]{idKerusakan, noKamar, jenisKerusakan, prioritas, tglLaporanDate, status, komentar});
        }

        // Set model ke dalam tabel
        tblmaintenance.setModel(model);

        // Aktifkan pengurutan pada tabel
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
        tblmaintenance.setRowSorter(sorter);

        // Atur pengurutan awal (misalnya, berdasarkan kolom "ID Kerusakan" secara default)
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Error saat menampilkan data: " + e.getMessage());
    } finally {
        // Tidak perlu menutup koneksi di sini karena koneksi didapatkan dari kelas dbconnection
    }
    }
    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
    try {
        // Mendapatkan koneksi dari kelas dbconnection
        Connection conn = dbconnection.koneksi();

        // Pengambilan nilai dari inputan pencarian
        String searchText = txtsearch.getText();

        // Cek apakah searchText kosong
        if (searchText.isEmpty()) {
            tampilkanData(); // Jika kosong, tampilkan semua data
            return;
        }

        // Query SQL untuk melakukan pencarian berdasarkan teks pada kolom tertentu
        String searchQuery = "SELECT * FROM maintenance WHERE id_kerusakan LIKE ? OR nokamar LIKE ? OR jeniskerusakan LIKE ? OR prioritas LIKE ? OR tgllaporan LIKE ? OR status LIKE ? OR komentar LIKE ?";
        PreparedStatement ps = conn.prepareStatement(searchQuery);
        for (int i = 1; i <= 7; i++) {
            ps.setString(i, "%" + searchText + "%");
        }

        ResultSet rs = ps.executeQuery();

        // Menghapus semua baris dalam model tabel
        DefaultTableModel model = (DefaultTableModel) tblmaintenance.getModel();
        model.setRowCount(0);

        // Menambahkan hasil pencarian ke dalam model tabel
        while (rs.next()) {
            Object[] row = {
                rs.getString("id_kerusakan"),
                rs.getString("nokamar"),
                rs.getString("jeniskerusakan"),
                rs.getString("prioritas"),
                rs.getString("tgllaporan"),
                rs.getString("status"),
                rs.getString("komentar")
            };
            model.addRow(row);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Pencarian gagal: " + e.getMessage());
    }
    }//GEN-LAST:event_btnsearchActionPerformed

    private void tblmaintenanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmaintenanceMouseClicked
        int baris = tblmaintenance.rowAtPoint(evt.getPoint());

    txtnoservice.setText(tblmaintenance.getValueAt(baris, 0).toString());
    
    String noKamar = tblmaintenance.getValueAt(baris, 1).toString();
    cbnokamar.setSelectedItem(noKamar);
    
    String jenisKerusakan = tblmaintenance.getValueAt(baris, 2).toString();
    cbkerusakan.setSelectedItem(jenisKerusakan);
    
    String prioritas = tblmaintenance.getValueAt(baris, 3).toString();
    cbprioritas.setSelectedItem(prioritas);
    
    try {
        Date tanggalLaporan = new SimpleDateFormat("yyyy-MM-dd").parse(tblmaintenance.getValueAt(baris, 4).toString());
        if (tanggalLaporan != null) {
            // Mengatur nilai tanggal langsung ke JDateChooser
            txttgllapor.setDate(tanggalLaporan);
        }
    } catch (ParseException ex) {
        ex.printStackTrace();
    }
    
    String status = tblmaintenance.getValueAt(baris, 5).toString();
    cbstatus.setSelectedItem(status);
    
    String komentar = tblmaintenance.getValueAt(baris, 6).toString();
    txtcatatan.setText(komentar);
    }//GEN-LAST:event_tblmaintenanceMouseClicked

    private void btnubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnubahActionPerformed
        try {
        // Mendapatkan koneksi dari kelas dbconnection
        Connection conn = dbconnection.koneksi();

        // Pengambilan nilai dari inputan pengguna
        String idKerusakanInput = txtnoservice.getText(); // Mengambil nilai dari JTextField txtnoservice
        String idKerusakan = String.format("SV-%s", idKerusakanInput); // Memformat nilai menjadi "SV-(Nomor Id)"
        String noKamar = (String) cbnokamar.getSelectedItem(); // Mengambil nomor kamar dari JComboBox cbnokamar
        String jenisKerusakan = (String) cbkerusakan.getSelectedItem(); // Mengambil jenis kerusakan dari JComboBox cbkerusakan
        String prioritas = (String) cbprioritas.getSelectedItem(); // Mengambil prioritas dari JComboBox cbprioritas
        Date tanggalLaporan = txttgllapor.getDate(); // Mengambil tanggal laporan dari JDateChooser txttgllapor
        String status = (String) cbstatus.getSelectedItem(); // Mengambil status dari JComboBox cbstatus
        String komentar = txtcatatan.getText(); // Mengambil komentar dari JTextField txtcatatan

        // Memeriksa apakah ada kolom yang kosong
        if (idKerusakanInput.isEmpty() || noKamar.isEmpty() || jenisKerusakan.isEmpty() || prioritas.isEmpty() || tanggalLaporan == null || status.isEmpty() || komentar.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Data tidak boleh ada yang kosong!");
            return; // Menghentikan eksekusi jika ada kolom yang kosong
        }

        // Memeriksa keberadaan nomor service dan nomor kamar dalam database
        if (isNoServiceExist(idKerusakan)) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, ID Kerusakan sudah ada");
            return; // Keluar dari metode jika nomor service sudah ada
        }

        if (isNokamarExist(noKamar)) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, nomor kamar sudah ada");
            return; // Keluar dari metode jika nomor kamar sudah ada
        }

        // Jika nomor kamar dan nomor service belum ada, lanjutkan proses penambahan data
        // Query SQL untuk menambahkan data baru ke tabel maintenance
        String insertQuery = "INSERT INTO maintenance (id_kerusakan, nokamar, jeniskerusakan, prioritas, tgllaporan, status, komentar) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(insertQuery)) {
            ps.setString(1, idKerusakan);
            ps.setString(2, noKamar);
            ps.setString(3, jenisKerusakan);
            ps.setString(4, prioritas);
            ps.setDate(5, tanggalLaporan != null ? new java.sql.Date(tanggalLaporan.getTime()) : null);
            ps.setString(6, status);
            ps.setString(7, komentar);

            int result = ps.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(rootPane, "Data berhasil ditambahkan");
                kosongkan(); // Setelah berhasil, kosongkan inputan
                tampilkanData(); // Tampilkan kembali data pada tabel
            } else {
                JOptionPane.showMessageDialog(rootPane, "Data gagal ditambahkan");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Tambah data gagal: " + e.getMessage());
    } finally {
        // Tidak perlu menutup koneksi di sini karena koneksi didapatkan dari kelas dbconnection
    }
    }//GEN-LAST:event_btnubahActionPerformed

    private void btntambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahActionPerformed
     try {
        // Mendapatkan koneksi dari kelas dbconnection
        Connection conn = dbconnection.koneksi();

        // Pengambilan nilai dari inputan pengguna
        String idKerusakanInput = txtnoservice.getText(); // Mengambil nilai dari JTextField txtnoservice
        String idKerusakan = String.format("SV-%s", idKerusakanInput); // Memformat nilai menjadi "SV-(Nomor Id)"
        String noKamar = (String) cbnokamar.getSelectedItem(); // Mengambil nomor kamar dari JComboBox cbnokamar
        String jenisKerusakan = (String) cbkerusakan.getSelectedItem(); // Mengambil jenis kerusakan dari JComboBox cbkerusakan
        String prioritas = (String) cbprioritas.getSelectedItem(); // Mengambil prioritas dari JComboBox cbprioritas
        Date tanggalLaporan = txttgllapor.getDate(); // Mengambil tanggal laporan dari JDateChooser txttgllapor
        String status = (String) cbstatus.getSelectedItem(); // Mengambil status dari JComboBox cbstatus
        String komentar = txtcatatan.getText(); // Mengambil komentar dari JTextField txtcatatan

        // Memeriksa apakah ada kolom yang kosong
        if (idKerusakanInput.isEmpty() || noKamar.isEmpty() || jenisKerusakan.isEmpty() || prioritas.isEmpty() || tanggalLaporan == null || status.isEmpty() || komentar.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Data tidak boleh ada yang kosong!");
            return; // Menghentikan eksekusi jika ada kolom yang kosong
        }

        // Memeriksa keberadaan nomor service dan nomor kamar dalam database
        if (isNoServiceExist(idKerusakan)) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, nomor service sudah ada");
            return; // Keluar dari metode jika nomor service sudah ada
        }

        if (isNokamarExist(noKamar)) {
            JOptionPane.showMessageDialog(rootPane, "Maaf, nomor kamar sudah ada");
            return; // Keluar dari metode jika nomor kamar sudah ada
        }

        // Jika nomor kamar dan nomor service belum ada, lanjutkan proses penambahan data
        // Query SQL untuk menambahkan data baru ke tabel maintenance
        String insertQuery = "INSERT INTO maintenance (id_kerusakan, nokamar, jeniskerusakan, prioritas, tgllaporan, status, komentar) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(insertQuery)) {
            ps.setString(1, idKerusakan);
            ps.setString(2, noKamar);
            ps.setString(3, jenisKerusakan);
            ps.setString(4, prioritas);
            ps.setDate(5, tanggalLaporan != null ? new java.sql.Date(tanggalLaporan.getTime()) : null);
            ps.setString(6, status);
            ps.setString(7, komentar);

            int result = ps.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(rootPane, "Data berhasil ditambahkan");
                kosongkan(); // Setelah berhasil, kosongkan inputan
                tampilkanData(); // Tampilkan kembali data pada tabel
            } else {
                JOptionPane.showMessageDialog(rootPane, "Data gagal ditambahkan");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "Tambah data gagal: " + e.getMessage());
    } finally {
        // Tidak perlu menutup koneksi di sini karena koneksi didapatkan dari kelas dbconnection
    }
    }//GEN-LAST:event_btntambahActionPerformed

    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
        try {
        // Mendapatkan koneksi dari kelas dbconnection
        Connection conn = dbconnection.koneksi();

        // Pengambilan nilai dari inputan pengguna
        String idKerusakanToDelete = txtnoservice.getText(); // Gantilah dengan komponen input yang sesuai

        // Query SQL untuk menghapus data berdasarkan id_kerusakan
        String deleteQuery = "DELETE FROM maintenance WHERE id_kerusakan = ?";
        PreparedStatement deletePS = conn.prepareStatement(deleteQuery);
        deletePS.setString(1, idKerusakanToDelete);

        int deleteResult = deletePS.executeUpdate();
        if (deleteResult > 0) {
            JOptionPane.showMessageDialog(rootPane, "Data berhasil dihapus");
            tampilkanData(); // Tampilkan kembali data pada tabel setelah menghapus
        } else {
            JOptionPane.showMessageDialog(rootPane, "Data dengan ID Kerusakan tersebut tidak ditemukan");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(rootPane, "Hapus data gagal: " + ex.getMessage());
    }
    kosongkan();
    }//GEN-LAST:event_btnhapusActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:
        try {
        // Mendapatkan input stream dari file JasperReport
        InputStream reportStream;
            reportStream = getClass().getResourceAsStream("/Reports/Report_DataService.jasper");

        // Memeriksa apakah input stream berhasil didapatkan
        if (reportStream != null) {
            // Mengisi laporan dengan data dari database dan file JasperReport
            JasperPrint jp = JasperFillManager.fillReport(reportStream, null, dbconnection.koneksi());
            
            // Menampilkan laporan menggunakan JasperViewer
            JasperViewer.viewReport(jp, false);
        } else {
            JOptionPane.showMessageDialog(this, "JasperReport file not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (JRException e) {
        JOptionPane.showMessageDialog(this, "Error Displaying Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnprintActionPerformed

    private void cbstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbstatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbstatusActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        try {
            // Mendapatkan input stream dari file JasperReport
            InputStream reportStream;
            reportStream = getClass().getResourceAsStream("/Reports/InformasiTarif.jasper");

            // Memeriksa apakah input stream berhasil didapatkan
            if (reportStream != null) {
                // Mengisi laporan dengan data dari database dan file JasperReport
                JasperPrint jp = JasperFillManager.fillReport(reportStream, null, dbconnection.koneksi());

                // Menampilkan laporan menggunakan JasperViewer
                JasperViewer.viewReport(jp, false);
            } else {
                JOptionPane.showMessageDialog(this, "JasperReport file not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, "Error Displaying Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        try {
            // Mendapatkan input stream dari file JasperReport
            InputStream reportStream;
            reportStream = getClass().getResourceAsStream("/Reports/InformasiPeraturan.jasper");

            // Memeriksa apakah input stream berhasil didapatkan
            if (reportStream != null) {
                // Mengisi laporan dengan data dari database dan file JasperReport
                JasperPrint jp = JasperFillManager.fillReport(reportStream, null, dbconnection.koneksi());

                // Menampilkan laporan menggunakan JasperViewer
                JasperViewer.viewReport(jp, false);
            } else {
                JOptionPane.showMessageDialog(this, "JasperReport file not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, "Error Displaying Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        try {
            // Mendapatkan input stream dari file JasperReport
            InputStream reportStream;
            reportStream = getClass().getResourceAsStream("/Reports/InformasiKerusakan.jasper");

            // Memeriksa apakah input stream berhasil didapatkan
            if (reportStream != null) {
                // Mengisi laporan dengan data dari database dan file JasperReport
                JasperPrint jp = JasperFillManager.fillReport(reportStream, null, dbconnection.koneksi());

                // Menampilkan laporan menggunakan JasperViewer
                JasperViewer.viewReport(jp, false);
            } else {
                JOptionPane.showMessageDialog(this, "JasperReport file not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, "Error Displaying Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        MenuUtama pindah = new MenuUtama();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        MenuPIC pindah = new MenuPIC();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        MenuKamar pindah = new MenuKamar();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        MenuPengeluaran pindah = new MenuPengeluaran();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        MenuLaporanBulanan pindah = new MenuLaporanBulanan();
        pindah.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    
    private void kosongkan() {
     txtnoservice.setText("");
    cbnokamar.setSelectedIndex(0); // Mengosongkan JComboBox
    cbkerusakan.setSelectedIndex(0); // Mengosongkan JComboBox
    cbprioritas.setSelectedIndex(0); // Mengosongkan JComboBox
    txttgllapor.setDate(null); // Mengosongkan JDateChooser
    cbstatus.setSelectedIndex(0); // Mengosongkan JComboBox
    txtcatatan.setText("");
 
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuService().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnsearch;
    private javax.swing.JButton btntambah;
    private javax.swing.JButton btnubah;
    private javax.swing.JComboBox<String> cbkerusakan;
    private javax.swing.JComboBox<String> cbnokamar;
    private javax.swing.JComboBox<String> cbprioritas;
    private javax.swing.JComboBox<String> cbstatus;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnlogout;
    private javax.swing.JTable tblmaintenance;
    private javax.swing.JTextPane txtcatatan;
    private javax.swing.JTextField txtnoservice;
    private javax.swing.JTextField txtsearch;
    private com.toedter.calendar.JDateChooser txttgllapor;
    // End of variables declaration//GEN-END:variables
}
